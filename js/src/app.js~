define(['jquery','backbone','underscore'], function($, Backbone, underscore, undefined) {
	
	/* 
		The function to define the app
	*/
	
	// underscore template settings
	_.templateSettings = {
		evaluate: /\{\[([\s\S]+?)\]\}/g,
		interpolate: /\{\{(.+?)\}\}/g,
		variable: 'data'
	};
	
	
	console.log('app initialization started');
	
		// the defaultCss's properties will be set on the 
		// Constructors.ElementView $el (the 'LI')
		// on View initialization
		// their properties should be overridden
		// when instantiating new elements, in the 'elCss' property
	var defaultCss = {
			listStyle: 'none',
			margin: '0 0 0 0',
			padding: '0 0 0 0',
			width: '100%',
			height: '100%', 
			zIndex: 0,
			opacity: 0,
			display: 'none',
			top: 0,
			left: 0,
			position: 'absolute'
		},			
		// the transitions var is used to store the 
		// transition objects.
		// When one calls 'PluginObj.registerTransition(),
		// a transition is added to this object.			
		transitions = {
			fade: {
				show: function(defer, duration) {
					
					var self = this;
					
					// first set the display to block,
					// so that any setup defined by 
					// the view may use the DOM element
					this.$el.css('display','block');
					
					this.setUp();
					
					this.$el.animate({opacity: 1}, 
						{
							duration: duration,
							complete: function() {
								defer.resolve();
							}
						});
				},
				hide: function(defer, duration) {
					
					var self = this;
					
					this.$el.animate({opacity: 0},
						{
							duration: duration,
							complete: function() {
								self.tearDown();
								self.$el.css('display','none');
								
								defer.resolve();
							}
						});							
				}
			}
		};
		
	// this function checks if the plugin is instantiated and runs the 
	// right callback function (yes or no)
	function isInstantiated(element, actions) {
		
		var pluginObj = $.data(element, pluginName);
		
		if (pluginObj) {
			actions.yes(pluginObj);
		} else {				
			actions.no();
		}
	}
	
	// this function checks if the responseArr is composed of only one value
	// and if so, it responds with the value directly instead of an array
	function respond(responseArr) {
		// if the responseArr.length is only 1, then just return the value
		if (responseArr.length == 1) {
			return responseArr[0];
			
		} else if (responseArr.length == 0) {
			return false;
			
		} else if (responseArr.length > 1) {
			return responseArr;	
		}
	}
	
	// validates any object by verifying properties and respective typeofs
	function validateObj(obj, props) {
		/*
			props:
				prop: typeof prop (str)
		*/
		
		_.each(props, function(expected_type, prop_name) {
			
			if (!obj[prop_name]) {
				throw new Error("There is no '" + prop_name + "' in " + obj);
			}
			
			var actual_type = typeof obj[prop_name];
			
			if (actual_type != expected_type) {
				throw new TypeError("The property '" + prop_name + "' from " + obj + " is not a '" + expected_type + "' but a '" + actual_type + "'");
			}
		});
		
		return true;
	}
	
	// function validates a transition object
	function validateTransition(transition, name) {
		
		var props = {
				show: 'function',
				hide: 'function'
			},
			val = validateObj(transition, props);
			
		return val;
	}
	
	
	// function checks if is array or string
	function arrStr(i) {
		
		/*
			i:
				- obj,*
				- funcs:*
					- str,	*
					- arrItem,	*
					- arr,	*
					- objItem,
					- obj
				- context
		*/
		
		
		
		var type = typeof i.obj;
		
		if (type === 'string') {
			
			i.funcs.str.call(i.context, i.obj);
			
		} else if ( _.isArray(i.obj) ) {
			
			// the obj is an array
			
			if (i.funcs.arrItem) {
				
				// iterate over the object,
				// the i.funcs.arrItem requires the value inside the array
				_.each(i.obj, function(val, index) {
					i.funcs.arrItem.call(i.context, val, index);
				});
				
			} else {
				
				// return the array to the function
				// the i.funcs.arr requires the 'array' itself
				i.funcs.arr.call(i.context, i.obj);
				
			}
			
			
		} else {
			// it is an object
			
			if (i.funcs.obj) {
				// if there is a special function to objects, run it
				i.funcs.obj.call(i.context, i.obj);
				
			} else {
				// else run the function dedicated to arrays
				i.funcs.arr.call(i.context, i.obj);
			}
		}
	}
	
	
	
	// Utils area!
	var Utils = {
		isInstantiated: isInstantiated,
		respond: respond,
		validateTransition: validateTransition,
		validateObj: validateObj,
		arrStr: arrStr
	}
	
	
	
	
	// Backbone area!
	var Constructors = {};		
	
	Constructors.ElementView = Backbone.View.extend({
			
		tagName: 'li',
		
		initialize: function(opts) {
			_.bindAll(this);
			
			// check if all necessary data has been passed in the opts
			if (!opts.elModel) {
				throw new Error('No opts.elModel passed to View initialization');
			} else if (!opts.elCollection) {
				throw new Error('No opts.elCollection passed to View initialization');
			} else if (!opts.name) {
				throw new Error('No opts.name passed to View initialization');
			} else if (!opts.pluginObj) {
				throw new Error('No opts.pluginObj passsed to View initialization');
			}
			
			
			// the view only receives the model, from where it should
			// get all necessary data
			this.elModel = opts.elModel;
			
			// must be passed in: el, elCollection, pluginObj, name
			this.elCollection = opts.elCollection;
			this.pluginObj = opts.pluginObj;
			
			
			// then sets to listen to changes on the model it created
			this.listenTo( this.elModel, 'change:display', this.setDisplay);
			
			// which could also have been written as: 'this.elCollection.get(this.name).on('change', this.setView)'
			
			// run the extended initialization
			this.extendedInitialize.call(this, opts);
			
			
			// do the basic rendering
			this.basicRender();
		},
		
		extendedInitialize: function(opts) {},
		
		basicRender: function() {

			// append the li
			var $ul = this.pluginObj.els.$ul;
			
			$ul.append(this.$el);
			
			// set the $li css
			
			var css = _.extend({}, defaultCss, this.getOpt('elCss') );
			
			this.$el.css(css);				
			
			// render the template
			var template = this.getOpt('template');
			
			if (template) {
				var compile_template = _.template(template),
					data = this.elModel.get('template_data');
				
				this.$el.html( compile_template(data) );
			}
		},
		
		setDisplay: function(e) {
			var self = this;
			
			switch (this.elModel.get('display')) {
				case 'show':
					// in case of showing, listen for the 'pagehidden' 
					// event on the collection then execute the 'show' method
					// and finally remove listener
					
					this.pluginObj.events.once('pagehidden', this.show);
					
					break;
					
				case 'hide':
					// in case of hiding, immediately hide
					// then tell the model to emit the 'pagehidden' event
					

					
					// overlapping:
					// set the 'pagehidden' event to fire when the
					// overlap time is due
					var overlap = this.pluginObj.get('overlap');
					
					if (overlap > 0 && overlap <= 1) {
						
						var duration = this.getOpt('duration'),
							overlapDue = duration * (1 - overlap);
							
						setTimeout(function() {
							
							self.pluginObj.events.trigger('pagehidden');
							
						}, overlapDue);
						
					}						
					
					$.when( this.hide() ).then(function() {
						self.pluginObj.events.trigger('pagehidden');
					});
					
					break;
			}
		},
		
		show: function() {
			var self = this,
				defer = $.Deferred();	// the transition defer
				
			// run the setUp
			this.setUp();
			
			// set the z-index to 1;
			this.$el.css({ zIndex: 1 });
			
			// get the transition type from the model:
			var type = this.getOpt('transitionType');
			
			
			// get the duration of the transition
			var duration = this.getOpt('duration');
			
			// run the transition in this view's context;
			transitions[type]['show'].call(this, defer, duration);
			
			return defer;
		},
		
		hide: function() {
			
			var self = this,
				defer1 = $.Deferred(),
				defer2 = $.Deferred();
			
			
					
			// set the z-index to 0;
			self.$el.css({ zIndex: 0 });
				
				
			// set up the async chain
			$.when(defer1).then(function() {
				
				// tearDown must happen after the hide is complete
				self.tearDown();
				
				defer2.resolve();
			});
			
			
			// get the transition type from the model or from the pluginObj
			var type = this.getOpt('transitionType');
			
			var duration = this.getOpt('duration');
							
			// run the transition in this view's context;
			transitions[type]['hide'].call(this, defer1, duration);
			
			return defer2;
		},
		
		getOpt: function(opt) {
			return this.elModel.get(opt) || this.pluginObj.get(opt);
		},
		
		setUp: function() {},
		tearDown: function() {},
	});
	
	Constructors.ElementModel = Backbone.Model.extend({
		defaults: {
			display: 'not-initialized',
		},
		
		initialize: function(opts) {				
			_.bindAll(this);
			
			this.elCollection = this.get('elCollection');
			
			if (typeof this.elCollection !== 'object') {
				throw new Error('This model hasn\'t been given a elCollection');
			}
			
			this.pluginObj = this.elCollection.pluginObj;
			
			var view = this.get('view') || this.pluginObj.get('view');
			
			this.elView = new view({
				name: this.id,
				elModel: this, 
				elCollection: this.elCollection,
				pluginObj: this.pluginObj
			});
			
		}
	});
	
	Constructors.ElementCollection = Backbone.Collection.extend({
		model: Constructors.ElementModel,
		
		initialize: function(models, opts) {
			
			this.opts = opts;
			
			this.pluginObj = opts.pluginObj;
		}
	});
	
	
	
	
	var pluginName = 'jtrans',
		pluginDefaults = {
			overlap: 0,
			transitionType: 'fade',
			duration: 500,
			template: '<div id="replace-with-yours">You should place your template here</div>',
			view: Constructors.ElementView
		};	
	
	
	
	// PLUGIN AREA
		
	function Plugin(element, options) {
		// jQuery has an extend method that merges the
		// contents of two or more objects, storing the
		// result in the first object. The first object
		// is generally empty because we don't want to alter 
		// the default options for future instances of the plugin
		
		this._defaults = pluginDefaults;
		this._pluginName = pluginName;
		
		// save the options
		this.options = $.extend( {}, pluginDefaults, options );
		
		
		this.els = {
			frame: element,
			$frame: $(element)
		}
		
		// the events object
		this.events = _.extend({}, Backbone.Events);
		
		this.setFraming();
		
		
		this.elCollection = new Constructors.ElementCollection([], { pluginObj: this });
	}
	
	Plugin.prototype.setFraming = function() {
		// check the type of the element passed is a DIV
		if (this.els.frame.tagName != 'DIV') {
			throw new Error('The element passed is not a DIV');
		}
		
		// set the style attributes on the 'els.frame'
		this.els.$frame.css({
			position: 'relative',
			overflow: 'hidden'
		});
		
		// build the 'ul' which will contain all elements
		var $ul = $('<ul></ul>').appendTo(this.els.$frame)
			.css({
				position: 'relative',
				top: '0px',
				left: '0px',
				
				width: '100%',
				height: '100%',
				
				padding: '0 0 0 0',
				margin: '0 0 0 0'
			});
			
		this.els.$ul = $ul;
		this.els.ul = this.els.$ul[0];
		
		
		console.log('ok, framing set');
	}
	
	
	Plugin.prototype.remove = function() {
		$.removeData(this.els.frame, pluginName);
	}
	
	Plugin.prototype.set = function(opt, val) {
		
		switch (typeof opt) {
			case 'object':
				
				for (option in opt) {
					if ( opt.hasOwnProperty(option) ) {
						
						this.options[option] = opt[option];							
					}
				}
				
				break;
			case 'string':
				
					this.options[opt] = val;
				
				break;
		}
		
		return this;
		
	}
	
	Plugin.prototype.get = function(opt, deep) {
		
		if (typeof deep == 'undefined') {
			
			// gets a option of the plugin
			return this.options[opt];
			
		} else if (opt == 'element') {
			
			
			console.log('elCollection', this.elCollection);
			
			console.log('elCollection.get(deep)', this.elCollection.get(deep) );
			
			// gets a element model
			return this.elCollection.get(deep);
			
		} else if (opt == 'prop') {
			
			// directly gets a prop from this obj
			return this[deep];
			
		}
	}
	
	Plugin.prototype.registerTransition = function(name_or_transitions, obj) {
		if (typeof name_or_transitions === 'string') {
			
			validateTransition(name_or_transitions, obj);
			
			transitions[name_or_transitions] = obj;
			
		} else if (typeof name_or_transitions === 'object') {
			
			_.each(name_or_transitions, function(trans, index) {
				
				validateTransition(trans, index);
				
				transitions[index] = trans;
			});
		}
		
		return this;
	}
	
	// add a model to the elCollection
	
	Plugin.prototype.addElement = function(info) {
		/*
			info: 
				- id,
				- template,
				- View,
				- transitionType
		*/
		
		// extending the info for the model with default obligatory values
		var elInfo = _.extend({ pluginObj: this, elCollection: this.elCollection }, info);
		
		this.elCollection.add(elInfo);
		
		return this;
	}
	
	Plugin.prototype.to = function(id) {
		
		var self = this;
		
		arrStr({
			context: self,
			obj: id,
			funcs: {
				str: function(val) {
					
					// iterate over the elCollection, 
					// and set:
					// { display: 'hide' } in each item that is not inside the 'to-be-shown'
					// { display: 'show' } in each item that is to be shown
					this.elCollection.each( function(model, index) {
			
						if (model.get('id') !== val) {
							
							model.set({ display: 'hide' });
							
						} else {
							
							model.set({ display: 'show' });
							
						}
					});
				},
				arr: function(array) {
					
					this.elCollection.each( function(model, index) {
						
						var id = model.get('id');
						
						if ( _.indexOf(array, id) != -1 ) {
							
							// if the 'id' is not in the array, hide the page
							model.set({ display: 'hide' });
							
						} else {
							
							// if the 'id' is in the array, show the page
							model.set({ display: 'show' });
						}
					});						
				}
			}
		});
		
		return this;
	}
	
	
	
	
	// det direct access to backbone mocels, collections and views
	Plugin.prototype.Constructors = Constructors;
	
	// direct access to Utils
	Plugin.prototype.Utils = Utils;
	
	
	
	
	
				 
	// A really lightweight plugin wrapper around the constructor,
	// preventing against multiple instantiations
	$.fn[pluginName] = function ( method_or_options ) {			
		
		var args = Array.prototype.slice.call(arguments, 1);
		
		
		if ( typeof method_or_options === 'object' || !method_or_options ) {
			
			// run initialization for each element of selection
			return this.each(function(index, element) {
					
				// this refers to the html element in the collection
				isInstantiated(element, {
					yes: function(pluginObj) {
						
					},
					no: function(pluginObj) {
						
						$.data(element, pluginName, new Plugin(element, method_or_options) );
					}
				});
			});
			
		} else if (method_or_options == 'obj') {
			
			// return the plugin object instance
			var responseArr = [];
			
			this.each(function(index, element) {
					
				// this refers to the html element in the collection
				isInstantiated(element, {
					yes: function(pluginObj) {
						
						responseArr.push(pluginObj);
					},
					no: function() {
						
						var plug = $.data(element, pluginName, new Plugin(element) );
						
						responseArr.push(plug);
					}
				});
					
			});
			
			return respond(responseArr);
			
		} else if ( typeof method_or_options === 'string' && method_or_options != 'obj') {
			
			var responseArr = [];
			
			this.each(function() {
				
				isInstantiated(this, {
					yes: function(pluginObj) {
						
						// run the method requested using the pluginObj context
						responseArr.push( pluginObj[method_or_options].apply(pluginObj, args) );
						
					},
					no: function() {
						// if not, throw error
						throw new Error('This element\'s \'' + pluginName + ' plugin has not yet been initialized');
					}
				});
				
			});
			
			return respond(responseArr);
			
		}
			

	};
	
	
	
	
	
	console.log('app initialization finished');
});
